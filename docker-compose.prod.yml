services:
  # Database Services - Production
  postgres-auth:
    image: postgres:17-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_AUTH_USER:-auth_user}
      POSTGRES_PASSWORD: ${POSTGRES_AUTH_PASSWORD}
      POSTGRES_DB: auth
    ports:
      - '5432:5432'
    volumes:
      - postgres-auth-data:/var/lib/postgresql/data
    healthcheck:
      test:
        ['CMD-SHELL', 'pg_isready -U ${POSTGRES_AUTH_USER:-auth_user} -d auth']
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - microblog-network

  postgres-users:
    image: postgres:17-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USERS_USER:-users_user}
      POSTGRES_PASSWORD: ${POSTGRES_USERS_PASSWORD}
      POSTGRES_DB: users
    ports:
      - '5433:5432'
    volumes:
      - postgres-users-data:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'pg_isready -U ${POSTGRES_USERS_USER:-users_user} -d users',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - microblog-network

  postgres-posts:
    image: postgres:17-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_POSTS_USER:-posts_user}
      POSTGRES_PASSWORD: ${POSTGRES_POSTS_PASSWORD}
      POSTGRES_DB: posts
    ports:
      - '5434:5432'
    volumes:
      - postgres-posts-data:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'pg_isready -U ${POSTGRES_POSTS_USER:-posts_user} -d posts',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - microblog-network

  mongodb-comments:
    image: mongo:6.0
    ports:
      - '27017:27017'
    volumes:
      - mongodb-comments-data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_COMMENTS_USER:-comments_user}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_COMMENTS_PASSWORD}
    healthcheck:
      test: ['CMD', 'mongo', '--eval', "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - microblog-network

  mongodb-notifications:
    image: mongo:6.0
    ports:
      - '27018:27017'
    volumes:
      - mongodb-notifications-data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_NOTIFICATIONS_USER:-notifications_user}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_NOTIFICATIONS_PASSWORD}
    healthcheck:
      test: ['CMD', 'mongo', '--eval', "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - microblog-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=${ELASTICSEARCH_PASSWORD}
      - 'ES_JAVA_OPTS=-Xms1g -Xmx1g'
    ports:
      - '9200:9200'
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'curl -f -u elastic:${ELASTICSEARCH_PASSWORD} http://localhost:9200/_cluster/health || exit 1',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - microblog-network

  influxdb:
    image: influxdb:2.7-alpine
    ports:
      - '8086:8086'
    volumes:
      - influxdb-data:/var/lib/influxdb2
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=${INFLUXDB_USERNAME:-admin}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUXDB_PASSWORD}
      - DOCKER_INFLUXDB_INIT_ORG=${INFLUXDB_ORG:-microblog}
      - DOCKER_INFLUXDB_INIT_BUCKET=${INFLUXDB_BUCKET:-analytics}
    healthcheck:
      test: ['CMD', 'influx', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - microblog-network

  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    ports:
      - '5672:5672'
      - '15672:15672'
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-admin}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    healthcheck:
      test: ['CMD', 'rabbitmq-diagnostics', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - microblog-network

  redis:
    image: redis:7-alpine
    ports:
      - '6379:6379'
    volumes:
      - redis-data:/data
    command: redis-server --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - microblog-network

  # Microservices - Production
  auth-service:
    build:
      context: ./services/auth
      dockerfile: Dockerfile
    ports:
      - '3001:3001' # TCP microservice
      - '3002:3002' # HTTP observability
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres-auth
      - DB_PORT=5432
      - DB_USERNAME=${POSTGRES_AUTH_USER:-auth_user}
      - DB_PASSWORD=${POSTGRES_AUTH_PASSWORD}
      - DB_DATABASE=auth
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-24h}
    depends_on:
      postgres-auth:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - microblog-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  users-service:
    build:
      context: ./services/users
      dockerfile: Dockerfile
    ports:
      - '3003:3003'
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres-users
      - DB_PORT=5432
      - DB_USERNAME=${POSTGRES_USERS_USER:-users_user}
      - DB_PASSWORD=${POSTGRES_USERS_PASSWORD}
      - DB_DATABASE=users
    depends_on:
      postgres-users:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - microblog-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  posts-service:
    build:
      context: ./services/posts
      dockerfile: Dockerfile
    ports:
      - '3004:3004'
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres-posts
      - DB_PORT=5432
      - DB_USERNAME=${POSTGRES_POSTS_USER:-posts_user}
      - DB_PASSWORD=${POSTGRES_POSTS_PASSWORD}
      - DB_DATABASE=posts
    depends_on:
      postgres-posts:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - microblog-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  comments-service:
    build:
      context: ./services/comments
      dockerfile: Dockerfile
    ports:
      - '3005:3005'
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://${MONGO_COMMENTS_USER:-comments_user}:${MONGO_COMMENTS_PASSWORD}@mongodb-comments:27017/comments?authSource=admin
    depends_on:
      mongodb-comments:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - microblog-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  notifications-service:
    build:
      context: ./services/notifications
      dockerfile: Dockerfile
    ports:
      - '3006:3006'
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://${MONGO_NOTIFICATIONS_USER:-notifications_user}:${MONGO_NOTIFICATIONS_PASSWORD}@mongodb-notifications:27017/notifications?authSource=admin
      - RABBITMQ_URL=amqp://${RABBITMQ_USER:-admin}:${RABBITMQ_PASSWORD}@rabbitmq:5672
    depends_on:
      mongodb-notifications:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - microblog-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  search-service:
    build:
      context: ./services/search
      dockerfile: Dockerfile
    ports:
      - '3007:3007'
    environment:
      - NODE_ENV=production
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=${ELASTICSEARCH_PASSWORD}
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - microblog-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  analytics-service:
    build:
      context: ./services/analytics
      dockerfile: Dockerfile
    ports:
      - '3008:3008'
    environment:
      - NODE_ENV=production
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=${INFLUXDB_TOKEN}
      - INFLUXDB_ORG=${INFLUXDB_ORG:-microblog}
      - INFLUXDB_BUCKET=${INFLUXDB_BUCKET:-analytics}
    depends_on:
      influxdb:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - microblog-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  gateway-service:
    build:
      context: ./services/gateway
      dockerfile: Dockerfile
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=production
      - AUTH_SERVICE_HOST=auth-service
      - AUTH_SERVICE_PORT=3001
      - USERS_SERVICE_HOST=users-service
      - USERS_SERVICE_PORT=3003
      - POSTS_SERVICE_HOST=posts-service
      - POSTS_SERVICE_PORT=3004
      - COMMENTS_SERVICE_HOST=comments-service
      - COMMENTS_SERVICE_PORT=3005
      - NOTIFICATIONS_SERVICE_HOST=notifications-service
      - NOTIFICATIONS_SERVICE_PORT=3006
      - SEARCH_SERVICE_HOST=search-service
      - SEARCH_SERVICE_PORT=3007
      - ANALYTICS_SERVICE_HOST=analytics-service
      - ANALYTICS_SERVICE_PORT=3008
    depends_on:
      - auth-service
      - users-service
      - posts-service
      - comments-service
      - notifications-service
      - search-service
      - analytics-service
    restart: unless-stopped
    networks:
      - microblog-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Monitoring Services - Production
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-prod
    ports:
      - '9090:9090'
    volumes:
      - ./monitoring/prometheus/prometheus.prod.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - microblog-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  grafana:
    image: grafana/grafana:latest
    container_name: grafana-prod
    ports:
      - '3010:3000'
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - microblog-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter-prod
    ports:
      - '9100:9100'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    networks:
      - microblog-network

  # Load Balancer / Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - gateway-service
    restart: unless-stopped
    networks:
      - microblog-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

networks:
  microblog-network:
    driver: bridge

volumes:
  postgres-auth-data:
  postgres-users-data:
  postgres-posts-data:
  mongodb-comments-data:
  mongodb-notifications-data:
  elasticsearch-data:
  influxdb-data:
  rabbitmq-data:
  grafana-data:
  prometheus-data:
  redis-data:
